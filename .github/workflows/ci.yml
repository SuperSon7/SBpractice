
name: CI Pipeline - Deploy to EC2 for blog

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: devvb/blog
  IMAGE_TAG: latest

jobs:
  build-and-push-to-ecr:
    runs-on: ubuntu-latest

    services:

      postgres:

        image: postgres:15-alpine

        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb

        ports:
          - 5432:5432
        # DB가 연결을 받을 준비가 될 때까지 기다리는 옵션
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    permissions: # GitHub Actions가 AWS 자격 증명을 사용할 수 있도록 권한 부여
      contents: read

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3

    # AWS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

      # Docker 이미지 빌드, 태그 지정, ECR에 푸시
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
  deploy-to-ec2:
    needs: build-and-push-to-ecr
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }} 
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }} 
        script: |
          
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          docker-compose -f ~/docker-compose.yml pull
          
          docker-compose -f ~/docker-compose.yml up -d
          
          docker image prune -f